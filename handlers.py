# handlers.py
import os
from datetime import datetime, date, time, timezone, timedelta
import json
import google.generativeai as genai
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode 
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
import matplotlib.pyplot as plt
import io
import re
import calendar

from utils import load_json_with_firestore_sync, save_json_with_firestore_sync, get_sheet, calculate_age

# --- –ù–ê–°–¢–†–û–ô–ö–ê ---
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
PROFILES_FILE = "profiles.json"
REMINDERS_FILE = "reminders.json"
CHARTS_SENT_FILE = "charts_sent.json"

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
(
    GET_PEAKFLOW, GET_BREATHING, GET_COUGH, GET_SPUTUM, GET_MEDS,
    SET_PROFILE, GET_GENDER, SET_REMINDER,
    CONFIRM_CLEAR_DATA, GET_CHART_MONTH
) = range(10)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
async def show_main_menu(update: Update, text: str):
    reply_keyboard = [["‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ä"], ["üìà –ì—Ä–∞—Ñ–∏–∫", "ü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò"]]
    await update.message.reply_text(text, reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

async def check_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat_id = str(update.effective_chat.id)
    profiles = load_json_with_firestore_sync(PROFILES_FILE, telegram_chat_id="global_data")
    reminders = load_json_with_firestore_sync(REMINDERS_FILE, telegram_chat_id="global_data")
    user_profile = profiles.get(chat_id)

    if not user_profile or not user_profile.get('dob') or not user_profile.get('sex'):
        await update.effective_message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile.", reply_markup=ReplyKeyboardRemove())
        return False

    if chat_id not in reminders:
        await update.effective_message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /remind.", reply_markup=ReplyKeyboardRemove())
        return False 
    return True

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await show_main_menu(update, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_setup(update, context):
        return
    await show_main_menu(update, f'–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ë—Ä–æ–Ω—Ö–∏—Ç–∏–∫.')

async def start_logging(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_setup(update, context):
        return ConversationHandler.END
    reply_keyboard = [["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏—è. –ö–∞–∫–æ–µ —á–∏—Å–ª–æ –ø–æ–∫–∞–∑–∞–ª –ø—Ä–∏–±–æ—Ä?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True))
    return GET_PEAKFLOW

async def get_peakflow(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    try:
        context.user_data['peakflow'] = int(update.message.text)
        reply_keyboard = [["–î–∞", "–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]
        await update.message.reply_text("–î—ã—à–∞—Ç—å –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
        return GET_BREATHING
    except ValueError:
        await update.message.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return GET_PEAKFLOW 

async def get_breathing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    context.user_data['breathing'] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–ê –∫–∞—à–µ–ª—å –±—ã–ª?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GET_COUGH

async def get_cough(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    context.user_data['cough'] = update.message.text
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–ú–æ–∫—Ä–æ—Ç–∞ –±—ã–ª–∞?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GET_SPUTUM

async def get_sputum(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    context.user_data['sputum'] = update.message.text
    reply_keyboard = [["–ë–∞–∑–∏—Å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è"], ["–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏"], ["–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–ö–∞–∫–∏–µ-—Ç–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø—Ä–∏–Ω–∏–º–∞–ª(–∞)?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return GET_MEDS

async def get_meds_and_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    context.user_data['meds'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –°–µ–π—á–∞—Å –≤—Å–µ –∑–∞–ø–∏—à—É...")

    chat_id = str(update.effective_chat.id)
    profiles = load_json_with_firestore_sync(PROFILES_FILE, telegram_chat_id="global_data")
    user_profile = profiles.get(chat_id, {})
    dob_str = user_profile.get('dob')
    sex = user_profile.get('sex', '–Ω/–¥')
    age = calculate_age(dob_str) if dob_str else '–Ω/–¥'

    sheet = get_sheet()
    if not sheet:
        await show_main_menu(update, "‚ùå –û—à–∏–±–∫–∞! –ù–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ.")
        return ConversationHandler.END

    try:
        all_records = sheet.get_all_records()
        next_record_number = len(all_records) + 1
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        all_records = []
        next_record_number = 1

    now_moscow = datetime.now(timezone(timedelta(hours=3)))
    measurement_type = "—É—Ç—Ä–æ" if now_moscow.hour < 15 else "–≤–µ—á–µ—Ä"

    row_to_save = [
        next_record_number, now_moscow.strftime("%d.%m.%Y"), now_moscow.strftime("%H:%M:%S"),
        measurement_type, context.user_data.get('peakflow'), context.user_data.get('breathing'),
        context.user_data.get('cough'), context.user_data.get('sputum'), context.user_data.get('meds'),
        age, sex
    ]
    try:
        sheet.append_row(row_to_save, value_input_option='USER_ENTERED')
        await show_main_menu(update, "‚úÖ –ì–æ—Ç–æ–≤–æ! –í—Å–µ –∑–∞–ø–∏—Å–∞–ª–∞. –ú–æ–ª–æ–¥–µ—Ü!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        await show_main_menu(update, "‚ùå –û–π, –Ω–µ —Å–º–æ–≥–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")

    context.user_data.clear()
    return ConversationHandler.END

async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–∏–ª—å. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True))
    return SET_PROFILE

async def set_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    try:
        dob_str = update.message.text.strip()
        datetime.strptime(dob_str, "%d.%m.%Y")
        context.user_data['dob_to_save'] = dob_str 
        reply_keyboard = [["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"], ["–û—Ç–º–µ–Ω–∞"]]
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ä–µ–±–µ–Ω–∫–∞:", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
        return GET_GENDER
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–î–î.–ú–ú.–ì–ì–ì–ì).")
        return SET_PROFILE

async def get_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    sex_raw = update.message.text.strip().lower()
    if sex_raw not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return GET_GENDER
    dob_str = context.user_data.get('dob_to_save')
    if not dob_str:
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–Ω–æ–≤–æ.")
        return await profile_command(update, context)
    chat_id = str(update.effective_chat.id)
    first_name = update.effective_user.first_name
    profiles = load_json_with_firestore_sync(PROFILES_FILE, telegram_chat_id="global_data")
    profiles[chat_id] = {'dob': dob_str, 'sex': sex_raw, 'first_name': first_name}
    save_json_with_firestore_sync(profiles, PROFILES_FILE, telegram_chat_id="global_data")
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    return await remind_command(update, context)

async def remind_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00 20:30).", reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True))
    return SET_REMINDER

async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞": return await cancel(update, context)
    chat_id = str(update.message.chat_id)
    try:
        times = update.message.text.split()
        if len(times) != 2: raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏.")
        for t_str in times:
            datetime.strptime(t_str, '%H:%M')
        reminders = load_json_with_firestore_sync(REMINDERS_FILE, telegram_chat_id="global_data")
        if chat_id in reminders and 'jobs' in reminders.get(chat_id, {}):
            for job_name in reminders[chat_id]['jobs']:
                for job in context.job_queue.get_jobs_by_name(job_name):
                    job.schedule_removal()
        job_names = []
        for i, t_str in enumerate(times):
            t = datetime.strptime(t_str, '%H:%M').time()
            job_name = f"reminder_{chat_id}_{i}"
            job_names.append(job_name)
            context.job_queue.run_daily(send_reminder, time=t.replace(tzinfo=timezone(timedelta(hours=3))), chat_id=int(chat_id), name=job_name)
        reminders[chat_id] = {'times': times, 'jobs': job_names}
        save_json_with_firestore_sync(reminders, REMINDERS_FILE, telegram_chat_id="global_data")
        await show_main_menu(update, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—Å–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
        return ConversationHandler.END
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 20:30).")
        return SET_REMINDER

async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="–ù–∞ –Ω–µ–∑–∞–±—É–¥–∫–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ä! üå∏")

async def cancel_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    reminders = load_json_with_firestore_sync(REMINDERS_FILE, telegram_chat_id="global_data")
    if chat_id in reminders:
        if 'jobs' in reminders.get(chat_id, {}):
            for job_name in reminders[chat_id]['jobs']:
                for job in context.job_queue.get_jobs_by_name(job_name):
                    job.schedule_removal()
        del reminders[chat_id]
        save_json_with_firestore_sync(reminders, REMINDERS_FILE, telegram_chat_id="global_data")
        await update.message.reply_text("–í—Å–µ –≤–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    await show_main_menu(update, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")

def parse_rgb_string(rgb_string):
    match = re.match(r'rgb\((\d+),\s*(\d+),\s*(\d+)(?:,\s*[\d\.]+)?\)', rgb_string)
    if match:
        r, g, b = int(match.group(1)), int(match.group(2)), int(match.group(3))
        return (r / 255, g / 255, b / 255)
    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç RGB —Å—Ç—Ä–æ–∫–∏: {rgb_string}")

async def _generate_chart_image(chat_id: int, user_first_name: str, sheet_records: list, target_year: int = None, target_month: int = None):
    today_date = date.today()
    current_year = target_year if target_year is not None else today_date.year
    current_month = target_month if target_month is not None else today_date.month

    num_days_in_month = calendar.monthrange(current_year, current_month)[1]

    daily_raw_data = {day: {'morning': [], 'evening': []} for day in range(1, num_days_in_month + 1)}

    for record in sheet_records:
        try:
            record_date_str = record.get('–î–∞—Ç–∞')
            if not record_date_str: continue

            record_datetime_obj = datetime.strptime(record_date_str, "%d.%m.%Y")

            if record_datetime_obj.year == current_year and record_datetime_obj.month == current_month:
                day = record_datetime_obj.day
                value = int(record.get('–ü–∏–∫—Ñ–ª–æ—É–º–µ—Ç—Ä', 0))
                time_of_day = record.get('–í—Ä–µ–º—è —Å—É—Ç–æ–∫', '').strip().lower()

                if time_of_day == '—É—Ç—Ä–æ':
                    daily_raw_data[day]['morning'].append(value)
                elif time_of_day == '–≤–µ—á–µ—Ä':
                    daily_raw_data[day]['evening'].append(value)
        except (ValueError, TypeError) as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}, –ó–∞–ø–∏—Å—å: {record}")
            continue

    labels = list(range(1, num_days_in_month + 1))
    morning_data = [max(daily_raw_data[d]['morning']) if daily_raw_data[d]['morning'] else None for d in labels]
    evening_data = [max(daily_raw_data[d]['evening']) if daily_raw_data[d]['evening'] else None for d in labels]

    if not any(morning_data) and not any(evening_data):
        return None

    fig, ax = plt.subplots(figsize=(18, 8))

    morning_color = parse_rgb_string('rgb(54, 162, 235)')
    evening_color = parse_rgb_string('rgb(255, 99, 132)')

    ax.plot(labels, morning_data, label='–£—Ç—Ä–æ', color=morning_color, marker='o', linestyle='-', markersize=8, mfc='white')
    ax.plot(labels, evening_data, label='–í–µ—á–µ—Ä', color=evening_color, marker='o', linestyle='-', markersize=8, mfc='white')

    for i, val in enumerate(morning_data):
        if val is not None: ax.annotate(str(val), (labels[i], val), textcoords="offset points", xytext=(0,10), ha='center')
    for i, val in enumerate(evening_data):
        if val is not None: ax.annotate(str(val), (labels[i], val), textcoords="offset points", xytext=(0,-20), ha='center')

    ax.set_xlabel('–î–µ–Ω—å –º–µ—Å—è—Ü–∞')
    ax.set_ylabel('–ü–∏–∫—Ñ–ª–æ—É–º–µ—Ç—Ä (–ª/–º–∏–Ω)')
    ax.set_title(f'–î–Ω–µ–≤–Ω–∏–∫ –ø–∏–∫—Ñ–ª–æ—É–º–µ—Ç—Ä–∏–∏ –∑–∞ {date(current_year, current_month, 1).strftime("%B %Y")}')
    ax.set_xticks(labels)
    ax.set_ylim(50, 500)
    ax.set_yticks(range(50, 501, 50))
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.legend()
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=150)
    buf.seek(0)
    plt.close(fig)
    return buf

async def chart_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_setup(update, context):
        return ConversationHandler.END

    await update.message.reply_text("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞...")

    sheet = get_sheet()
    if not sheet:
        await show_main_menu(update, "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º.")
        return ConversationHandler.END

    try:
        all_records = sheet.get_all_records()
        if not all_records:
            await show_main_menu(update, "–í —Ç–∞–±–ª–∏—Ü–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return ConversationHandler.END
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        await show_main_menu(update, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return ConversationHandler.END

    available_months = set()
    for record in all_records:
        date_str = record.get('–î–∞—Ç–∞')
        if date_str:
            try:
                dt_obj = datetime.strptime(date_str, "%d.%m.%Y")
                month_key = dt_obj.strftime("%Y-%m")
                available_months.add(month_key)
            except ValueError:
                continue

    if not available_months:
        await show_main_menu(update, "–ù–µ –Ω–∞—à–ª–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return ConversationHandler.END

    sorted_months = sorted(list(available_months), reverse=True)

    month_names = {
        "01": "–Ø–Ω–≤–∞—Ä—å", "02": "–§–µ–≤—Ä–∞–ª—å", "03": "–ú–∞—Ä—Ç", "04": "–ê–ø—Ä–µ–ª—å",
        "05": "–ú–∞–π", "06": "–ò—é–Ω—å", "07": "–ò—é–ª—å", "08": "–ê–≤–≥—É—Å—Ç",
        "09": "–°–µ–Ω—Ç—è–±—Ä—å", "10": "–û–∫—Ç—è–±—Ä—å", "11": "–ù–æ—è–±—Ä—å", "12": "–î–µ–∫–∞–±—Ä—å"
    }

    keyboard_buttons = []
    for month_key in sorted_months:
        year, month_num = month_key.split('-')
        month_name = month_names.get(month_num, "")
        display_text = f"{month_name} {year}"
        keyboard_buttons.append([display_text])

    keyboard_buttons.append(["–û—Ç–º–µ–Ω–∞"])

    reply_markup = ReplyKeyboardMarkup(keyboard_buttons, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=reply_markup)

    return GET_CHART_MONTH

async def generate_chart_for_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == "–û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    selected_month_str = update.message.text

    month_map_reverse = {
        "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4,
        "–º–∞–π": 5, "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8,
        "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
    }

    try:
        parts = selected_month_str.lower().split()
        month_name = parts[0]
        year_str = parts[1]

        target_month = month_map_reverse[month_name]
        target_year = int(year_str)
    except (ValueError, KeyError, IndexError):
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–µ—Å—è—Ü. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return GET_CHART_MONTH

    await update.message.reply_text(f"–ì–æ—Ç–æ–≤–ª—é –≥—Ä–∞—Ñ–∏–∫ –∑–∞ {selected_month_str}...")

    sheet = get_sheet()
    if not sheet:
        await show_main_menu(update, "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º.")
        return ConversationHandler.END

    all_records = sheet.get_all_records()
    user_first_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = update.effective_chat.id

    chart_image_buffer = await _generate_chart_image(
        chat_id, user_first_name, all_records, target_year, target_month
    )

    if chart_image_buffer:
        try:
            await context.bot.send_photo(chat_id=chat_id, photo=chart_image_buffer)
            await show_main_menu(update, "–í–æ—Ç —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await show_main_menu(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
    else:
        await show_main_menu(update, f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {selected_month_str} –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

    return ConversationHandler.END

async def send_monthly_chart_to_users(context: ContextTypes.DEFAULT_TYPE):
    today = date.today()
    if today.day != 1: return

    first_day_of_current_month = today.replace(day=1)
    last_day_of_previous_month = first_day_of_current_month - timedelta(days=1)
    target_year = last_day_of_previous_month.year
    target_month = last_day_of_previous_month.month

    charts_sent_data = load_json_with_firestore_sync(CHARTS_SENT_FILE, telegram_chat_id="global_data")
    all_profiles_data = load_json_with_firestore_sync(PROFILES_FILE, telegram_chat_id="global_data")
    sheet = get_sheet()
    if not sheet: return

    all_records_from_sheet = sheet.get_all_records()

    for chat_id_str, profile_data in all_profiles_data.items():
        month_key = f"{target_year}-{target_month:02d}"
        if month_key in charts_sent_data.get(chat_id_str, []):
            continue

        user_first_name = profile_data.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        chart_image_buffer = await _generate_chart_image(
            int(chat_id_str), user_first_name, all_records_from_sheet, target_year, target_month
        )

        if chart_image_buffer:
            try:
                await context.bot.send_photo(
                    chat_id=int(chat_id_str),
                    photo=chart_image_buffer,
                    caption=f"–ü—Ä–∏–≤–µ—Ç, {user_first_name}! –í–æ—Ç —Ç–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫ –∑–∞ {date(target_year, target_month, 1).strftime('%B %Y')}."
                )
                if chat_id_str not in charts_sent_data:
                    charts_sent_data[chat_id_str] = []
                charts_sent_data[chat_id_str].append(month_key)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id_str}: {e}")

    save_json_with_firestore_sync(charts_sent_data, CHARTS_SENT_FILE, telegram_chat_id="global_data")

async def ai_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_setup(update, context): return

    if not GEMINI_API_KEY:
        await show_main_menu(update, "–§—É–Ω–∫—Ü–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
        return

    await update.message.reply_text("ü§ñ –ú–∏–Ω—É—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É...")

    sheet = get_sheet()
    if not sheet:
        await show_main_menu(update, "‚ùå –ù–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º.")
        return

    all_records = sheet.get_all_records()
    two_weeks_ago = datetime.now() - timedelta(days=14)
    recent_data = [
        rec for rec in all_records
        if '–î–∞—Ç–∞' in rec and rec.get('–î–∞—Ç–∞') and datetime.strptime(rec['–î–∞—Ç–∞'], "%d.%m.%Y") >= two_weeks_ago
    ]

    if not recent_data:
        await show_main_menu(update, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return

    chat_id = str(update.effective_chat.id)
    profiles = load_json_with_firestore_sync(PROFILES_FILE, telegram_chat_id="global_data")
    user_profile = profiles.get(chat_id, {})
    age = calculate_age(user_profile.get('dob')) if user_profile.get('dob') else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    sex = user_profile.get('sex', '–Ω/–¥')

    initial_prompt = f"""–¢—ã ‚Äî –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –ò–ò-–≤—Ä–∞—á, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ë—Ä–æ–Ω—Ö–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Ä–µ–±–µ–Ω–∫–∞. –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞: –≤–æ–∑—Ä–∞—Å—Ç {age}, –ø–æ–ª {sex}. –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –Ω–µ–¥–µ–ª–∏: {str(recent_data)}. –¢–≤–æ—è –∑–∞–¥–∞—á–∞: 1. –ö—Ä–∞—Ç–∫–æ –æ—Ü–µ–Ω–∏ –æ–±—â—É—é –¥–∏–Ω–∞–º–∏–∫—É –ø–∏–∫—Ñ–ª–æ—É–º–µ—Ç—Ä–∏–∏ (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è, –ø–∞–¥–∞–µ—Ç, —Ä–∞—Å—Ç–µ—Ç). –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º. 2. –ü–æ—Å–º–æ—Ç—Ä–∏, –µ—Å—Ç—å –ª–∏ –¥–Ω–∏ —Å –Ω–∏–∑–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏. –ï—Å–ª–∏ –µ—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—å, –±—ã–ª–∏ –ª–∏ –≤ —ç—Ç–∏ –¥–Ω–∏ —Å–∏–º–ø—Ç–æ–º—ã (–∫–∞—à–µ–ª—å, –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ). 3. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤—ã–≤–æ–¥—ã –≤ 2-3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∏ –ø–æ–Ω—è—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö. 4. –î–∞–π –æ–¥–Ω—É –≥–ª–∞–≤–Ω—É—é, –æ–±–æ–¥—Ä—è—é—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–∏—à–∏ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π –º–∞–Ω–µ—Ä–µ, –æ–±—Ä–∞—â–∞—è—Å—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—é."""

    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        response = model.generate_content(initial_prompt)

        await update.message.reply_text(response.text, reply_markup=ReplyKeyboardRemove())
        await show_main_menu(update, "–ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini API: {e}")
        await show_main_menu(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == "ü§ñ –ê–Ω–∞–ª–∏–∑ –ò–ò":
        await ai_report(update, context)
    return ConversationHandler.END

async def clear_data_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["–î–∞", "–ù–µ—Ç"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ. –í—ã —É–≤–µ—Ä–µ–Ω—ã?", reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True))
    return CONFIRM_CLEAR_DATA

async def confirm_clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    response = update.message.text.lower()
    if response == "–¥–∞":
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            sheet = get_sheet()
            if sheet and sheet.row_count > 1:
                sheet.delete_rows(2, sheet.row_count)
            save_json_with_firestore_sync({}, PROFILES_FILE, telegram_chat_id="global_data")
            save_json_with_firestore_sync({}, REMINDERS_FILE, telegram_chat_id="global_data")
            save_json_with_firestore_sync({}, CHARTS_SENT_FILE, telegram_chat_id="global_data")
            await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
            return await profile_command(update, context)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
            return ConversationHandler.END
    elif response in ["–Ω–µ—Ç", "–æ—Ç–º–µ–Ω–∞"]:
        return await cancel(update, context)
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    return CONFIRM_CLEAR_DATA

# --- –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ ---
main_conv = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex("^‚úÖ –°–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Ä$"), start_logging),
        MessageHandler(filters.Regex("^üìà –ì—Ä–∞—Ñ–∏–∫$"), chart_start),
        CommandHandler("cleardata", clear_data_command),
        CommandHandler("profile", profile_command),
        CommandHandler("remind", remind_command)
    ],
    states={
        GET_PEAKFLOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_peakflow)],
        GET_BREATHING: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), get_breathing)],
        GET_COUGH: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), get_cough)],
        GET_SPUTUM: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), get_sputum)],
        GET_MEDS: [MessageHandler(filters.Regex("^(–ë–∞–∑–∏—Å–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è|–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –±–æ–ª–µ–∑–Ω–∏|–ù–µ—Ç)$"), get_meds_and_save)],
        CONFIRM_CLEAR_DATA: [MessageHandler(filters.Regex("^(–î–∞|–ù–µ—Ç)$"), confirm_clear_data)],
        SET_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_profile)],
        GET_GENDER: [MessageHandler(filters.Regex("^(–ú—É–∂—Å–∫–æ–π|–ñ–µ–Ω—Å–∫–∏–π)$"), get_gender)],
        SET_REMINDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_reminder)],
        GET_CHART_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_chart_for_month)],
    },
    fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)],
    allow_reentry=True
)

log_conv = main_conv
profile_conv = main_conv
remind_conv = main_conv
clear_data_conv = main_conv
